local var_0_0 = require("ffi")
local var_0_1 = require("gamesense/csgo_weapons")

local function var_0_2(arg_1_0)
	local var_1_0 = var_0_0.cast("uint8_t*", arg_1_0)

	if var_1_0[0] == 232 then
		return var_1_0 + var_0_0.cast("int32_t*", var_1_0 + 1)[0] + 5
	elseif var_1_0[0] == 255 and var_1_0[1] == 21 then
		return var_0_0.cast("uint32_t**", var_0_0.cast("const char*", arg_1_0) + 2)[0][0]
	else
		error(string.format("unknown instruction to follow: %02X!", var_1_0[0]))
	end
end

local function var_0_3(arg_2_0)
	return string.format("%X", tonumber(var_0_0.cast("uintptr_t", arg_2_0)))
end

local var_0_4 = var_0_0.typeof("\tstruct {\n\t\tuint8_t* data;\n\t\tint32_t data_bytes;\n\t\tint32_t data_bits;\n\t\tint32_t cur_bit;\n\t\tbool overflow;\n\t\tbool assert_on_overflow;\n\t\tconst char* name;\n\t\tuint8_t* memory;\n\t\tint32_t allocation_count;\n\t\tint32_t grow_size;\n\t}\n")
local var_0_5 = var_0_0.typeof("\tstruct {\n\t\tchar pad0[156];\n\t\tstruct {\n\t\t\tchar pad0[24];\n\t\t\tint32_t out_sequence_nr;\n\t\t\tint32_t in_sequence_nr;\n\t\t\tint32_t out_sequence_nr_ack;\n\t\t\tint32_t out_reliable_state;\n\t\t\tint32_t in_reliable_state;\n\t\t\tint32_t choked_packets;\n\t\t\t$ reliable_stream;\n\t\t\t$ unreliable_stream;\n\t\t\t$ voice_stream;\n\t\t\tint32_t socket;\n\t\t\tint32_t stream_socket;\n\t\t\tuint32_t max_reliable_payload_size;\n\t\t\tbool was_last_message_reliable;\n\t\t}* netchannel;\n\t} ***\n", var_0_4, var_0_4, var_0_4)
local var_0_6 = var_0_0.cast(var_0_5, var_0_0.cast("char*", client.find_signature("engine.dll", "~>\x8B=\xCC\xCC\xCC\xCC")) + 4)[0][0]
local var_0_7 = vtable_thunk(40, "bool(__thiscall*)(void*, void*, bool, bool)")
local var_0_8 = vtable_thunk(47, "void(__thiscall*)(void*, bool)")
local var_0_9 = vtable_thunk(2, "void(__thiscall*)(void*, bool)")
local var_0_10 = vtable_thunk(5, "bool(__thiscall*)(void*, void*)")
local var_0_11 = vtable_thunk(6, "bool(__thiscall*)(void*)")
local var_0_12 = var_0_0.cast("void(__thiscall*)(void*, const char*)", client.find_signature("engine.dll", "U\x8B\xECV\x8B\xF1\xE8\xCC\xCC\xCC\xCC\xFFu\b\x8DN\x04"))
local var_0_13 = var_0_0.cast("void(__thiscall*)(void*)", var_0_2(client.find_signature("engine.dll", "\xE8\xCC\xCC\xCC̋M\b\xC7E\xCC\xCC\xCC\xCC̍\x04\xCD")))
local var_0_14 = var_0_0.cast("void(__thiscall*)(void*, int, int)", var_0_2(client.find_signature("engine.dll", "\xE8\xCC\xCC\xCC̋\x8F\xCC\xCC\xCC̍U\xB0")))
local var_0_15 = var_0_0.cast("void(__thiscall*)(void*)", var_0_2(client.find_signature("engine.dll", "\xE8\xCC\xCC\xCC̋E\xE0\xC7E\xCC\xCC\xCC\xCC\xCC")))
local var_0_16 = client.find_signature("engine.dll", "\xA1\xCC\xCC\xCC\xCC3\xD2j\x00j\x003ɉ\xB0") or error("Signature was not found")
local var_0_17 = client.find_signature("engine.dll", "\x83\xB8\xCC\xCC\xCC\xCC\xCC\x0F\x94\xC0\xC3") or error("Signature was not found")
local var_0_18 = tonumber(var_0_0.cast("int*", tonumber(var_0_0.cast("uintptr_t", var_0_16)) + 1)[0])
local var_0_19 = tonumber(var_0_0.cast("int*", tonumber(var_0_0.cast("uintptr_t", var_0_17)) + 2)[0])
local var_0_20 = var_0_0.cast("int*", var_0_18)[0]
local var_0_21 = var_0_0.cast("int*", var_0_20 + var_0_19)[0]

local function var_0_22(arg_3_0, arg_3_1, arg_3_2)
	if var_0_6.netchannel == nil then
		return
	end

	if arg_3_1 == nil then
		arg_3_1 = var_0_11(arg_3_0) and "reliable" or "unreliable"
	end

	local var_3_0 = var_0_6.netchannel[arg_3_1 .. "_stream"]

	var_0_10(arg_3_0, var_0_0.cast("void*", var_3_0))

	if arg_3_2 then
		var_0_8(var_0_6.netchannel, false)
	end
end

local function var_0_23(arg_4_0)
	local var_4_0 = var_0_0.new("uint32_t[32]")
	local var_4_1 = var_0_0.cast("void*", var_0_0.cast("uint32_t*", var_4_0))

	var_0_14(var_4_1, 1, arg_4_0)
	var_0_9(var_4_1, false)
	var_0_22(var_4_1, "unreliable", true)
	var_0_15(var_4_1)
end

local var_0_24 = 0
local var_0_25 = globals.curtime()
local var_0_26 = globals.curtime()
local var_0_27 = 0
local var_0_28 = false

local function var_0_29()
	var_0_27 = 0
	var_0_28 = true

	var_0_23(4)
	client.exec("+forward")
end

local var_0_30 = ui.new_checkbox("LUA", "A", "Enable teleport on reconnect")
local var_0_31 = ui.new_combobox("LUA", "A", "Reconnect team", "CT", "T")

ui.new_button("LUA", "A", "Respawn", var_0_29)

local var_0_32 = false

local function var_0_33(arg_6_0)
	if arg_6_0 == 4 or arg_6_0 == 5 then
		client.exec("joingame;")
	end
end

local function var_0_34(arg_7_0)
	if (arg_7_0 == 4 or arg_7_0 == 5) and var_0_26 + 0.25 < globals.curtime() then
		var_0_26 = globals.curtime()

		if arg_7_0 == 5 and var_0_27 < 5 then
			var_0_27 = var_0_27 + 1
		end

		client.exec("joingame;")

		var_0_32 = not var_0_32
	end
end

local function var_0_35(arg_8_0)
	local var_8_0 = ui.get(var_0_31)

	if ui.get(var_0_30) and (arg_8_0 == 4 or arg_8_0 == 5) and var_0_26 + 0.1 < globals.curtime() then
		var_0_26 = globals.curtime()

		client.exec("joingame; jointeam " .. (var_8_0 == "CT" and "3" or "2") .. " 1;")
	end
end

local function var_0_36(arg_9_0)
	local var_9_0 = ui.get(var_0_31)

	if ui.get(var_0_30) and (arg_9_0 == 4 or arg_9_0 == 5) then
		client.exec("joingame; jointeam " .. (var_9_0 == "CT" and "3" or "2") .. " 1;")
	end
end

client.set_event_callback("paint_ui", function()
	local var_10_0 = var_0_0.cast("int*", var_0_20 + var_0_19)[0]

	if var_10_0 ~= var_0_24 then
		var_0_26 = globals.curtime()
		var_0_24 = var_10_0
		var_0_25 = globals.curtime()

		if var_0_28 then
			var_0_33(var_10_0)
		else
			var_0_36(var_10_0)
		end

		if var_10_0 == 6 and var_0_28 then
			var_0_28 = false

			client.exec("-forward")
		end
	end

	if var_0_28 then
		var_0_34(var_10_0)
	else
		var_0_35(var_10_0)
	end
end)
